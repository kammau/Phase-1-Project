THE IMPORTANCE OF EVENT LISTENING IN WEB DEVELOPMENT: 
 INTRODUCTION:
If you did not already know, building a website with just HTML and CSS, and even just HTML, is completely possible. But in doing that you loose out on the beautiful opportunity of incorporating interactivity. Today we will be discussing the importance of interactivity and one of the best ways to incorporate it into your website today. 
A LITTLE HISTORY ON JAVASCRIPT:
JavaScript first appeared in 1995, two years after the release of HTML. Since then one of its biggest roles has been aiding HTML and CSS in the development of web sites and web applications. By now you may be asking yourself why was JavaScript invented if it's completely possible to create websites without it? Well the answer to that question is interactivity.
 JAVASCRIPT AND INTERACTIVITY:
As we have already discussed, JavaScripts main part to play in the whole web development scene is interactivity. So what do I mean by interactivity when it comes to web development? Google defines interactivity in the computer world, as "the ability of a computer to respond to a user's input ". Now think about your favorite web page for a moment. Does it have buttons? Maybe it has a text box where you can share a new recipe you've found. Perhaps even a heart, that when clicked on, will glow red and the like count will increase. All of these things involve JavaScript user browser interactivity. Without JavaScript, the websites that you know and love become bland. One of the best ways to incorporate interactivity is through event listening. 
EVENT LISTENING IN JAVASCRIPT:
Event listening is the ability for our webpage to listen for an "event" to happen, such as a button being clicked, then preform an action after that event has happened. Event Listening is a way we can make buttons, forms, and even a user moving their mouse over an element, more interactive. Let me present an example. Say you are developing a website that has a button, and you want your user to be able to press that button to log "Hello!" to the screen. You may know how to create a button using HTML, but how do you make it so the message is printed. This is were the amazing JavaScript method .addEventListener comes in. 
.addEventListener:
.addEventListener is a built in JavaScript method that allows us to do the things discussed in the paragraph above. So how does it work? The method takes two parameters, 1) what type of event to listen for, and 2) what to do when said event happens. Starting with the first parameter, there are many different events we can listen for. Going back to our example from above, we want to listen for the "click" of that button. So we know we are listening for a "click" event. With the second parameter we need to create a function that will log our message. To do this, we can create an anonymous function that takes our event as a parameter, then logs "Hello!" To our console. Here is what all this put together may look like: 
.addEventListener("click", function(event) { 
console.log("Hello!");
}
 You may have tried the above example with high hopes, but when you ran the program the console returned an error. You may have rechecked it a couple of times, but with no avail. The reason our console keeps spouting out an error is that the console doesn't know where exactly we are listening for this event! So how do we tell our method we want to be listening for our button to be pressed? One of the most common ways to do this is to grab our button by its HTML given id, and assign it to a variable so we can use it in our JavaScript code. Say our buttons id is htmlBtn, to grab this from our HTML document we can use document.getElementById, with our htmlBtn id and assign it to a variable, as shown below: 
const htmlBtnVar = document.getElementById("htmlBtn");
Now that we have our button element we can add our event listener!
htmlBtnVar.addEventListener("click", function(event) { 
console.log("Hello!");
}
You have done it! You have successfully added an interactive button to your web page, give your self a pat on the back. 
CONCLUSION:
You now know how to add interactivity to your web page. However, this is only one piece of the puzzle. There is still so much more to the world of JavaScript website interactivity, but don't let this discourage you. I hope you will continue your adventure in this amazing world of web development!
